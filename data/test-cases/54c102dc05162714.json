{
  "uid" : "54c102dc05162714",
  "name" : "test_invalid_methods[GET]",
  "fullName" : "tests_api.test_post_logout.TestPostLogout#test_invalid_methods",
  "historyId" : "a2d527d5e8bbad43f8aecb453636561c",
  "time" : {
    "start" : 1718454870070,
    "stop" : 1718454870233,
    "duration" : 163
  },
  "description" : "Verify response code with invalid methods.",
  "descriptionHtml" : "<p>Verify response code with invalid methods.</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: assert 200 == 404\n +  where 200 = <Response [200]>.status_code",
  "statusTrace" : "self = <tests.tests_api.test_post_logout.TestPostLogout object at 0x7f25571c39d0>\nlogout = <api.user.USER object at 0x7f255612f9d0>, method = 'get', exp = 404\n\n    @pytest.mark.parametrize('method, exp', invalid_methods)\n    def test_invalid_methods(self, logout, method, exp):\n        \"\"\"Verify response code with invalid methods.\"\"\"\n        logout.setup_logout(logout.access_token)\n        response = logout.send_requests(method, logout.endpoints.logout,\n                                        None, logout.data)\n>       assert response.status_code == exp\nE       assert 200 == 404\nE        +  where 200 = <Response [200]>.status_code\n\ntests/tests_api/test_post_logout.py:65: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "logout",
    "time" : {
      "start" : 1718454869837,
      "stop" : 1718454870070,
      "duration" : 233
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Setup logout data",
      "time" : {
        "start" : 1718454869837,
        "stop" : 1718454869837,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Send POST register request",
      "time" : {
        "start" : 1718454869837,
        "stop" : 1718454870070,
        "duration" : 233
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "aa6cae52c6171647",
        "name" : "Request Info",
        "source" : "aa6cae52c6171647.txt",
        "type" : "text/plain",
        "size" : 203
      }, {
        "uid" : "da6a4b13b549b8f5",
        "name" : "api Response",
        "source" : "da6a4b13b549b8f5.json",
        "type" : "application/json",
        "size" : 431
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 2,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "base_url",
    "time" : {
      "start" : 1718454831288,
      "stop" : 1718454831288,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_verify_url",
    "time" : {
      "start" : 1718454831288,
      "stop" : 1718454831288,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1718454831288,
      "stop" : 1718454831310,
      "duration" : 22
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "pytestconfig",
    "time" : {
      "start" : 1718454831288,
      "stop" : 1718454831288,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "register",
    "time" : {
      "start" : 1718454869836,
      "stop" : 1718454869837,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Setup Register data",
      "time" : {
        "start" : 1718454869836,
        "stop" : 1718454869837,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Set user registration data_models",
        "time" : {
          "start" : 1718454869837,
          "stop" : 1718454869837,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "name",
          "value" : "'Base chernandez'"
        }, {
          "name" : "mail",
          "value" : "'Miguel.Briggs@alexander.com'"
        }, {
          "name" : "pwd",
          "value" : "'!0yqW7'"
        } ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 1,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "delete_output_dir",
    "time" : {
      "start" : 1718454831288,
      "stop" : 1718454831288,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "Verify response code with invalid methods.",
    "status" : "failed",
    "statusMessage" : "AssertionError: assert 200 == 404\n +  where 200 = <Response [200]>.status_code",
    "statusTrace" : "self = <tests.tests_api.test_post_logout.TestPostLogout object at 0x7f25571c39d0>\nlogout = <api.user.USER object at 0x7f255612f9d0>, method = 'get', exp = 404\n\n    @pytest.mark.parametrize('method, exp', invalid_methods)\n    def test_invalid_methods(self, logout, method, exp):\n        \"\"\"Verify response code with invalid methods.\"\"\"\n        logout.setup_logout(logout.access_token)\n        response = logout.send_requests(method, logout.endpoints.logout,\n                                        None, logout.data)\n>       assert response.status_code == exp\nE       assert 200 == 404\nE        +  where 200 = <Response [200]>.status_code\n\ntests/tests_api/test_post_logout.py:65: AssertionError",
    "steps" : [ {
      "name" : "Setup logout data",
      "time" : {
        "start" : 1718454870070,
        "stop" : 1718454870070,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "data",
        "value" : "'b502140d99033a51e63ee971de50c661e9c4fdc5f61c09c90cd3b78ce654b3e44f0065a0190f0000'"
      } ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "Send get requests",
      "time" : {
        "start" : 1718454870070,
        "stop" : 1718454870233,
        "duration" : 163
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "1596aad31924176e",
        "name" : "Request Info",
        "source" : "1596aad31924176e.txt",
        "type" : "text/plain",
        "size" : 204
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "logout::0",
    "time" : {
      "start" : 1718454870236,
      "stop" : 1718454870237,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "register::0",
    "time" : {
      "start" : 1718454870237,
      "stop" : 1718454870412,
      "duration" : 175
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Send DELETE request",
      "time" : {
        "start" : 1718454870237,
        "stop" : 1718454870411,
        "duration" : 174
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Setup Header with user token",
        "time" : {
          "start" : 1718454870237,
          "stop" : 1718454870237,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "token",
          "value" : "None"
        } ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      } ],
      "attachments" : [ {
        "uid" : "c51cdc31ed39dc9e",
        "name" : "Request Info",
        "source" : "c51cdc31ed39dc9e.txt",
        "type" : "text/plain",
        "size" : 137
      } ],
      "parameters" : [ {
        "name" : "access_token",
        "value" : "None"
      } ],
      "stepsCount" : 1,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  } ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "tests_api"
  }, {
    "name" : "suite",
    "value" : "test_post_logout"
  }, {
    "name" : "subSuite",
    "value" : "TestPostLogout"
  }, {
    "name" : "host",
    "value" : "9b654ca84938"
  }, {
    "name" : "thread",
    "value" : "8-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests_api.test_post_logout"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "exp",
    "value" : "404"
  }, {
    "name" : "method",
    "value" : "'get'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 2,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 2
      },
      "items" : [ {
        "uid" : "37cc3756600a505a",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert 200 == 404\n +  where 200 = <Response [200]>.status_code",
        "time" : {
          "start" : 1718453533055,
          "stop" : 1718453533225,
          "duration" : 170
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "54c102dc05162714.json",
  "parameterValues" : [ "404", "'get'" ]
}