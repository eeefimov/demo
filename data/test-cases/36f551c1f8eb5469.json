{
  "uid" : "36f551c1f8eb5469",
  "name" : "test_invalid_methods[GET]",
  "fullName" : "tests_api.test_post_reset_password.TestReset#test_invalid_methods",
  "historyId" : "9a2c0e5f648df66cf090e838afd8cabb",
  "time" : {
    "start" : 1718454957384,
    "stop" : 1718454957543,
    "duration" : 159
  },
  "description" : "Verify response code with invalid type of method.",
  "descriptionHtml" : "<p>Verify response code with invalid type of method.</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: assert 200 == 404\n +  where 200 = <Response [200]>.status_code",
  "statusTrace" : "self = <tests.tests_api.test_post_reset_password.TestReset object at 0x7f2557032850>\nreset = <api.user.USER object at 0x7f2557dac590>, method = 'get', exp = 404\n\n    @pytest.mark.parametrize('method, exp', invalid_methods)\n    def test_invalid_methods(self, reset, method, exp):\n        \"\"\"Verify response code with invalid type of method.\"\"\"\n        response = reset.send_requests(method, reset.endpoint,\n                                       None, reset.data)\n>       assert response.status_code == exp\nE       assert 200 == 404\nE        +  where 200 = <Response [200]>.status_code\n\ntests/tests_api/test_post_reset_password.py:68: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "base_url",
    "time" : {
      "start" : 1718454831288,
      "stop" : 1718454831288,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_verify_url",
    "time" : {
      "start" : 1718454831288,
      "stop" : 1718454831288,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "reset",
    "time" : {
      "start" : 1718454957158,
      "stop" : 1718454957383,
      "duration" : 225
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Setup reset request",
      "time" : {
        "start" : 1718454957158,
        "stop" : 1718454957383,
        "duration" : 225
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Send POST register request",
        "time" : {
          "start" : 1718454957158,
          "stop" : 1718454957382,
          "duration" : 224
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "17957e04929f7914",
          "name" : "Request Info",
          "source" : "17957e04929f7914.txt",
          "type" : "text/plain",
          "size" : 200
        }, {
          "uid" : "32e8600417c8d455",
          "name" : "api Response",
          "source" : "32e8600417c8d455.json",
          "type" : "application/json",
          "size" : 428
        } ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 2,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "reset",
        "value" : "<api.user.USER object at 0x7f2557dac590>"
      } ],
      "stepsCount" : 1,
      "attachmentsCount" : 2,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1718454831288,
      "stop" : 1718454831310,
      "duration" : 22
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "pytestconfig",
    "time" : {
      "start" : 1718454831288,
      "stop" : 1718454831288,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "delete_output_dir",
    "time" : {
      "start" : 1718454831288,
      "stop" : 1718454831288,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "register",
    "time" : {
      "start" : 1718454957157,
      "stop" : 1718454957158,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Setup Register data",
      "time" : {
        "start" : 1718454957157,
        "stop" : 1718454957158,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Set user registration data_models",
        "time" : {
          "start" : 1718454957158,
          "stop" : 1718454957158,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "name",
          "value" : "'Defenicox'"
        }, {
          "name" : "mail",
          "value" : "'Carol.Myers@kelly-trujillo.com'"
        }, {
          "name" : "pwd",
          "value" : "'(Omq)P'"
        } ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 1,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  } ],
  "testStage" : {
    "description" : "Verify response code with invalid type of method.",
    "status" : "failed",
    "statusMessage" : "AssertionError: assert 200 == 404\n +  where 200 = <Response [200]>.status_code",
    "statusTrace" : "self = <tests.tests_api.test_post_reset_password.TestReset object at 0x7f2557032850>\nreset = <api.user.USER object at 0x7f2557dac590>, method = 'get', exp = 404\n\n    @pytest.mark.parametrize('method, exp', invalid_methods)\n    def test_invalid_methods(self, reset, method, exp):\n        \"\"\"Verify response code with invalid type of method.\"\"\"\n        response = reset.send_requests(method, reset.endpoint,\n                                       None, reset.data)\n>       assert response.status_code == exp\nE       assert 200 == 404\nE        +  where 200 = <Response [200]>.status_code\n\ntests/tests_api/test_post_reset_password.py:68: AssertionError",
    "steps" : [ {
      "name" : "Send get requests",
      "time" : {
        "start" : 1718454957384,
        "stop" : 1718454957542,
        "duration" : 158
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "1448695fe63034bd",
        "name" : "Request Info",
        "source" : "1448695fe63034bd.txt",
        "type" : "text/plain",
        "size" : 157
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "register::0",
    "time" : {
      "start" : 1718454957545,
      "stop" : 1718454957964,
      "duration" : 419
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Send DELETE request",
      "time" : {
        "start" : 1718454957545,
        "stop" : 1718454957964,
        "duration" : 419
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Setup Header with user token",
        "time" : {
          "start" : 1718454957545,
          "stop" : 1718454957545,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "token",
          "value" : "'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY2NmQ4YWFkOWVkMjgwMDAxYjQzZGFhZCIsImlhdCI6MTcxODQ1NDk1NywiZXhwIjoxNzE4NDU2MTU3fQ.Kg_XTR1EGKOhGa8IVF_nk69LbKHe_UT7ECiY_vdfWiM'"
        } ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      } ],
      "attachments" : [ {
        "uid" : "bd8bf76cebe955d9",
        "name" : "Request Info",
        "source" : "bd8bf76cebe955d9.txt",
        "type" : "text/plain",
        "size" : 311
      } ],
      "parameters" : [ {
        "name" : "access_token",
        "value" : "'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY2NmQ4YWFkOWVkMjgwMDAxYjQzZGFhZCIsImlhdCI6MTcxODQ1NDk1NywiZXhwIjoxNzE4NDU2MTU3fQ.Kg_XTR1EGKOhGa8IVF_nk69LbKHe_UT7ECiY_vdfWiM'"
      } ],
      "stepsCount" : 1,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  } ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "tests_api"
  }, {
    "name" : "suite",
    "value" : "test_post_reset_password"
  }, {
    "name" : "subSuite",
    "value" : "TestReset"
  }, {
    "name" : "host",
    "value" : "9b654ca84938"
  }, {
    "name" : "thread",
    "value" : "8-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests_api.test_post_reset_password"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "exp",
    "value" : "404"
  }, {
    "name" : "method",
    "value" : "'get'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 2,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 2
      },
      "items" : [ {
        "uid" : "60d69d63c702456a",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert 200 == 404\n +  where 200 = <Response [200]>.status_code",
        "time" : {
          "start" : 1718453620415,
          "stop" : 1718453620576,
          "duration" : 161
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "36f551c1f8eb5469.json",
  "parameterValues" : [ "404", "'get'" ]
}