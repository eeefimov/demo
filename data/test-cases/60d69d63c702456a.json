{
  "uid" : "60d69d63c702456a",
  "name" : "test_invalid_methods[GET]",
  "fullName" : "tests_api.test_post_reset_password.TestReset#test_invalid_methods",
  "historyId" : "9a2c0e5f648df66cf090e838afd8cabb",
  "time" : {
    "start" : 1718453620415,
    "stop" : 1718453620576,
    "duration" : 161
  },
  "description" : "Verify response code with invalid type of method.",
  "descriptionHtml" : "<p>Verify response code with invalid type of method.</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: assert 200 == 404\n +  where 200 = <Response [200]>.status_code",
  "statusTrace" : "self = <tests.tests_api.test_post_reset_password.TestReset object at 0x7fa11532ab90>\nreset = <api.user.USER object at 0x7fa117029010>, method = 'get', exp = 404\n\n    @pytest.mark.parametrize('method, exp', invalid_methods)\n    def test_invalid_methods(self, reset, method, exp):\n        \"\"\"Verify response code with invalid type of method.\"\"\"\n        response = reset.send_requests(method, reset.endpoint,\n                                       None, reset.data)\n>       assert response.status_code == exp\nE       assert 200 == 404\nE        +  where 200 = <Response [200]>.status_code\n\ntests/tests_api/test_post_reset_password.py:68: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1718453496061,
      "stop" : 1718453496083,
      "duration" : 22
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_verify_url",
    "time" : {
      "start" : 1718453496061,
      "stop" : 1718453496061,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "base_url",
    "time" : {
      "start" : 1718453496060,
      "stop" : 1718453496060,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "pytestconfig",
    "time" : {
      "start" : 1718453496061,
      "stop" : 1718453496061,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "delete_output_dir",
    "time" : {
      "start" : 1718453496061,
      "stop" : 1718453496061,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "reset",
    "time" : {
      "start" : 1718453620180,
      "stop" : 1718453620415,
      "duration" : 235
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Setup reset request",
      "time" : {
        "start" : 1718453620180,
        "stop" : 1718453620414,
        "duration" : 234
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Send POST register request",
        "time" : {
          "start" : 1718453620180,
          "stop" : 1718453620414,
          "duration" : 234
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ {
          "uid" : "e460b25a4e0de789",
          "name" : "Request Info",
          "source" : "e460b25a4e0de789.txt",
          "type" : "text/plain",
          "size" : 198
        }, {
          "uid" : "fce487aedcf1cc5",
          "name" : "api Response",
          "source" : "fce487aedcf1cc5.json",
          "type" : "application/json",
          "size" : 426
        } ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 2,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "reset",
        "value" : "<api.user.USER object at 0x7fa117029010>"
      } ],
      "stepsCount" : 1,
      "attachmentsCount" : 2,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "register",
    "time" : {
      "start" : 1718453620179,
      "stop" : 1718453620180,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Setup Register data",
      "time" : {
        "start" : 1718453620179,
        "stop" : 1718453620180,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Set user registration data_models",
        "time" : {
          "start" : 1718453620180,
          "stop" : 1718453620180,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "name",
          "value" : "'Comparmullins'"
        }, {
          "name" : "mail",
          "value" : "'James.Henderson@ford.com'"
        }, {
          "name" : "pwd",
          "value" : "'5#I3Ok'"
        } ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 1,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  } ],
  "testStage" : {
    "description" : "Verify response code with invalid type of method.",
    "status" : "failed",
    "statusMessage" : "AssertionError: assert 200 == 404\n +  where 200 = <Response [200]>.status_code",
    "statusTrace" : "self = <tests.tests_api.test_post_reset_password.TestReset object at 0x7fa11532ab90>\nreset = <api.user.USER object at 0x7fa117029010>, method = 'get', exp = 404\n\n    @pytest.mark.parametrize('method, exp', invalid_methods)\n    def test_invalid_methods(self, reset, method, exp):\n        \"\"\"Verify response code with invalid type of method.\"\"\"\n        response = reset.send_requests(method, reset.endpoint,\n                                       None, reset.data)\n>       assert response.status_code == exp\nE       assert 200 == 404\nE        +  where 200 = <Response [200]>.status_code\n\ntests/tests_api/test_post_reset_password.py:68: AssertionError",
    "steps" : [ {
      "name" : "Send get requests",
      "time" : {
        "start" : 1718453620415,
        "stop" : 1718453620575,
        "duration" : 160
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "acb17cdfa94fb2fb",
        "name" : "Request Info",
        "source" : "acb17cdfa94fb2fb.txt",
        "type" : "text/plain",
        "size" : 151
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "register::0",
    "time" : {
      "start" : 1718453620578,
      "stop" : 1718453620996,
      "duration" : 418
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Send DELETE request",
      "time" : {
        "start" : 1718453620578,
        "stop" : 1718453620995,
        "duration" : 417
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Setup Header with user token",
        "time" : {
          "start" : 1718453620579,
          "stop" : 1718453620579,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "token",
          "value" : "'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY2NmQ4NTc0OWVkMjgwMDAxYjQzZDk5ZCIsImlhdCI6MTcxODQ1MzYyMCwiZXhwIjoxNzE4NDU0ODIwfQ.5w-gyMv8XxfLT85VXIFLdYX4W0Z9Z2hsMrC6iN3E3Xw'"
        } ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      } ],
      "attachments" : [ {
        "uid" : "e184bc2bb9adc464",
        "name" : "Request Info",
        "source" : "e184bc2bb9adc464.txt",
        "type" : "text/plain",
        "size" : 311
      } ],
      "parameters" : [ {
        "name" : "access_token",
        "value" : "'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY2NmQ4NTc0OWVkMjgwMDAxYjQzZDk5ZCIsImlhdCI6MTcxODQ1MzYyMCwiZXhwIjoxNzE4NDU0ODIwfQ.5w-gyMv8XxfLT85VXIFLdYX4W0Z9Z2hsMrC6iN3E3Xw'"
      } ],
      "stepsCount" : 1,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  } ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "tests_api"
  }, {
    "name" : "suite",
    "value" : "test_post_reset_password"
  }, {
    "name" : "subSuite",
    "value" : "TestReset"
  }, {
    "name" : "host",
    "value" : "d36a71c73347"
  }, {
    "name" : "thread",
    "value" : "8-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests_api.test_post_reset_password"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "exp",
    "value" : "404"
  }, {
    "name" : "method",
    "value" : "'get'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "60d69d63c702456a.json",
  "parameterValues" : [ "404", "'get'" ]
}